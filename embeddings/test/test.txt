All right everyone. I hope Metro SIM either went well or is going well. , and that RPN is either going well or will go well shortly, as the case may be. , where we are in lecture is we've, um, uh, we we looked at trees uh, two times ago generally. What's a tree then? We look specifically at binary trees because these tend to show up a lot in CSS. , particularly as. For a finite map, which allows you to store data associated with something called key that you used to, um, that used to look up the thing, you're interested. So last time was mostly general stuff about binary trees. And um, and so kind of where we ended up was we had looked at sort of four shapes of traversal. , three of them were what we consider depth first traversal because they, they all a traversal goes through all the elements in the tree in the data structure. , and so they do it in different orders and different shapes. And so three of them were called depth. First, because they kind of go deeper into the tree before they spread out and go, why? , those are the first three. And so we saw that, uh, um, those three were the same, except as the relationship between when you process the data element in a node compared to when you process it subtrees. And So in order, um, you do usually we do the left subtree first. So you explore the left subtree. Then you process the current data element. Then you process the right subtree. Always remember that um not all functions are void functions. So you might when you explore the left subtree you might get data back. You might get data back. When you explore the right subtree, you may have to combine that with the information about the current node and return that. , so this is this is just a very general shape about sort of how we look at the tree. It's not it's not an algorithm yet. It's just a kind of a meta algorithm. What the it's the structure of the general algorithm. , preorder traversals. You visit the data in the nodes before you visit either of those subtrees, and then you visit the data. Right? So all three of those we consider to be depth. First search. There's a search if you're searching for a things that first traversal before. , adding up all the values or padding all the strings, or concatenating all of the strings that begin with the letter A is one of the students whose name is good today for some reason, but there may be lots of reasons to do this sort of commercial. , one thing I did on an Old Course 11 exam, you know, I couldn't call it a tree. But I nonetheless gave the problem. , and it was. But the problem was a tree traversal, and there was a lot of guidance at hand. But the idea there was, you had, um, like the Boston Metro water system and water distribution is often done in a tree like structure that like in New York, you felt like these huge aqueducts that come into Manhattan, even the branch out and they serve a different part of the city, and then those branch out of the service neighborhood, and then that part and then those where exactly they sort of provide water to somebody. Then the pipes can get smaller and smaller and smaller. Google used this. In fact, I remember going to a talk back before Google was public company. And they were doing research on it. It was one. One of the founders gave the talk. , but they were specifically talking about what they call fat networks, where you have a big honking light at that time. It was ten gigabits per second wire coming in. And then that splits into like, you know, one gigabit wires and that splits into smaller wires as a way to distribute information through their massive servers. Right. So, um, and so what you can do is you can now calculate the flow through the whole network. I sort of summing up all the nodes. You can answer all kinds of questions. , okay. So those are the depth first searches. And I have this similar preorder post order shape. They're all kind of naturally recursive because when you process a node you have access to the data in the node and then we looked at a fourth kind of traversal, which we call level order. , and this one, this one is great because it sort of explores the tree in breath before it goes. So breadth first traversal is to look at the root node, and then you look at all of the children of the root. Then you look at all of the children of all the children. And then you look at all the children of the children and the children of the group and basically go down to the tree. Well, level by level. And we said that that was hard to do because they were not as natural to be recursive, because when you're looking at a node, you don't have access to sort of the next thing you want to explore, because it might be a sibling, or if you're the last sibling at a level, it's the first node of the next level, which is, generally speaking, not something you can get to them. , and so we saw that what we did there was we used the iterative algorithm that used to queue. And so when the process mode you put it to the end. And this has the effect. Of the level. So any questions about the general conversions. A little bit of a plan today we're going to we're going to do a very quick wrap up of this. We're going to do a couple of in-class programing exercises that you'll do. And then we're going to start binary search. So that's kind of today's plan. and so here are the exercises actually. But actually before you get too entrenched I want to point out all of these have been previous exam questions. So very often in the slides we'll say exercise. And I used to do a lot of these actually I didn't get them back. but you say exercise exercise and then students perform an exam. Where can I get practice questions. So all those things you said exercise. Those are good, practice good. And in fact, they come from exams. That's where they. Oh, this is from an old. And it's a good practice question. But, um, so all three of these come from exams. And so if you're not motivated intrinsically by your love of trees, perhaps you'll be motivated by the desire to be in practice for the exams. , okay. So let's look at the particular ones. , so these are other forms of questions like, and I think I mentioned this last time. I can give you a bunch of I can give you a tree with labels on it, print the labels out in some order on the exam and ask you what traversal produced that order, or leave a blank and say do it in order. Traversal. List the nodes in the order they would be visited, right? So we can do stuff like that. , but of course the fun part is the programing. And so we're going to do that. And so what I'd like to do is give you, um, about ten. So there are three things. And um, 12 divided by three is four. So if you're a birthday um, okay. So first you form a team of 2 or 3 people. Then the person furthest to this side of the room, you look at their birth. If it's in January, February, March or April, you do number one number leaves. If it's May, June, July, August 3rd. Yeah. You do concat leaves if it's after that. So September, October, November, December, so forth. , you do the last one. I will warn you, the last one is a little harder. So maybe if you're a three person team, that might be nice. More than three people. And then you just fight over who's doing what. So, um, so make a team of 2 or 3 people, and then the from your point of view, the leftmost person birthday, uh, determines first quarter, first, uh, third of the year, and, um, leaves second concat leaves, um, final four months of the year. Path to value. , okay. So for my team, uh, go ahead and program. So start with pseudocode. But you can, um. . C plus plus is also fine. Yeah. So. This one is very hard to grade on the exam. . I think. One member of the group has a laptop open because I'm. Going to take the slides. Down. So that's just the through the you got this. There from yesterday. It's the same slide. Right? Well, they're a little different this year. Right. Oh. Yeah. Oh, no. I want them to put on this one. That's what I'm assuming. Yeah. Yeah. I have a device for that. Yeah. Yeah. Is there. Any. And. I was like, oh yeah. And I was like. Oh. Yeah. Oh. And. It's. Not. Just for the audience. I think it's like a like a public forum. All we have to say is all we have to do is go through and say it. All the way. Like, it's kind of like what we did with the very first person that was there and what we ran in. Oh, yeah. Oh, yeah. So. Well, I think that's. What we want. No no no no. It's not. Like what I'm. Saying. Not. Now. Not on other forms. Yeah. I mean. Yeah. No, that's. Like what's. Happening now. And. Smells like. You never tried it? Well, I hope so, because. If you do. Reference. Yourself. Because I like. It. You can always. Bring like I think I was like shopping, right. Yeah. I was like. Yeah. No, no. Like. You can. And. I know. I can't say. I got. Nothing or whatever. That's why I said. I mean. I mean. . Basically. I think you're right. All right. So far, I think you're right. , so, uh. So, yeah, I think. That's right. Yeah. I mean, I don't know. Yeah. Don't worry. Yes. Sir? Yeah, I think so. Very well. 