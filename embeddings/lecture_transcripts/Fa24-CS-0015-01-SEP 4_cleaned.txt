Actually. I don't know. Oh, you didn't know that? He doesn't take this. I don't know what. Is it. Exactly. Yeah. I think Fong is still here, but she's in grad school. I'm out. Oh, shit. Come on in. Have a seat. We're just about ready to go. There's one person tonight. That's okay. Uh, so. Hi, everybody. This is Kes 15 data structures. Everybody in the right place. I don't think I've taught in this room in, like, ten years, so the chairs are much more comfortable than they were before. Um, and they had a blackboard, which I like better, but anyway, um. Okay, so this is data structures, um, CSS 15. Um, I have another name for the course, which is, uh, maybe a little longer, but definitely a little longer. Um, data structures. Every working programmer must know how to use interfaces, implementations and costs. And so one of the things about this course is it makes you hirable. This is of course, that gets you higher. Um, because the these are common data structures that, that everybody needs to know because they're in like every application, you know, they show up over and over and over and they're all very cool. Um, and so I often refer to it as the journalist toolkit of a program. When you know these, it's, you know, it's the Germans toolkit. It's like the starter mechanics toolkit. Um, you're good to be an entry level mechanic. And then if you specialize, right, you want to specialize in rocket engines, you get a different you add different tools And likewise, depending on where you go in CSS, you'll add different tools to. So the ones we're going to talk about in this class are fairly universal. Um, I'm Mark Sheldon. Um, you can call me Mark. We're very informal in the department. Um, but sometimes that makes students uncomfortable. I can call my teacher Mark. So then you can call me Professor Sheldon if you want. Um, please don't call me Doctor Sheldon, because that's my dad. And it confuses me because I'll just think. What? What is he doing here? Um, so, Professor Sheldon or Mark are both fine. Um, I have a few announcements, and then we will have a performance by RCS 15, section one players. Um. Wait, what's going on right now? Don't run to that one. Oh, crap. Hold on, hold on, hold on.

Hold on, hold on.

You know, this, um, I committed yesterday that I was going to use this thing. And then it started to fail, like constantly. So let me let me see if I can find. So here is intro section one. Let's see if I can get that one to work on the web. Let's see. I don't know what's up on the screen I can. Open the wrong one. Um, okay, so a few announcements. Um, we mostly don't use canvas in this course. Only for one thing, which I'll mention in the. So don't stress about using canvas. In fact, most of you, if you attend regularly, you won't need it at all. Um, we use of course website. We're in the CSS department. We know how to make website so we don't need this. We do this sort of thing ourselves. Um, w w w the CSS. That tends to be news flash CSS slash routine. Have you all found that already? I sent my welcome emails. I think that one out. Um, if you add it after I sent my welcome emails. Okay. Belatedly. Welcome. And this is where you go for information. Um, there's a schedule page which has, of course, calendar. And I have to tell you, I have the course calendar up 100% of the time in a window, because that rules my life for the course, and therefore it rules your life for the question. Um, that's where everything is going to be. All the assignments, all the lectures. Um, there are other things on the website. So if you're a little rusty with C plus plus classes, you can go to the resources page. And they're like 3 or 4 things there to look at. Um, so you'll you'll want to look at the um, you'll want to browse the website generally to see what's there, you know, and if there's anything you need, use it. Right. That's why it's there. Um, if you have questions about the course, we use Piazza. Um, we don't email because, you know, 150 individual emails saying, what time was the midterm? That's like, come on, who's going to do that? Um, we use Piazza. Um, most of you have used Piazza before. Okay. Um, if you haven't, it's great. There's a link on the course website. You just click it and you'll go there to the course. Um, again, if you've added the course in the last 2 or 3 days, you won't be on the Piazza roster. I'll do another run tonight or tomorrow and get you on there. Um, please post publicly. Um, because, you know, I'm confused about part three of the homework. If you're confused about part three, the homework, there are ten other people who are also confused because there's no reason to like, you know, there's what part three is easier to understand. Just you. Right. That's just not cool. So I know sometimes people are a little shy, in which case you can you can post anonymously to students. We know who you are, but you post anonymously to students. Um, I prefer it if we use our names because then it feels like a community, right? If you know you're talking to Diane and it feels nice, and if you're talking to like extreme rabbit for 31 at, you know, it's like what? So it just if you use your names, it's nicer, but you won't post with your name. Then post anonymously. Better to ask, but not ask. That's the message. Um. Lecture notes are available from the calendar. I have a bad habit of changing lecture notes. Like, right up until I leave to go do the lecture. So the lecture notes that you see are probably the version I saved the night before. And, um, so it's possible there will be minor changes later in the day, but after a day or two, the lecture notes will be up to date. And the calendar generally. Um, the dates for the assignments are pretty well fixed and the lecture topics are a little less fixed, but pretty close. Um, so the past and the calendar is always accurate, and the near term future is good. And the long term future for things like exams and stuff is complicated. Um, what else I want to say? Lab started yesterday. How did those go? All right. Um, great. So if you did not get to lab yesterday, you can do lab zero on your own. No penalty other than you're not set up yet and you want to do it because you need to be set up because the first homework comes out next week. And it'll be easier to do if you have your environment set up. And it also you can ask questions. We may run a workshop. Is there anyone here who did not take CSE 11 here? Okay, I'll pick it up. But, uh, no online accounts. I'm on accounts. Okay. Um, but that's that's sort of what I thought. So I might talk to our grads here, but maybe doing a transition workshop if you are used to, you know, Java or Python or if you if you're used to Python, you might want to have a talk. That's going to be a tougher transition. Um, nothing against Python. I use it every day, but it's just a hard transition to this place. Um, labs after yesterday. So next weeks Lebanon are all required. We take attendance, and your attendance is part of your grade. Um, the idea is that we start a topic in lecture. You get hands on practice and land, and then we, we, we finish a review in in lecture. That's kind of the hopeful pattern. Um, so you do have to attend. Um, you should submit whatever you have done by the end of the lab. Sometimes students freak out. Oh, but my program is project. Here's what we care about. Show up. Make a good faith effort to learn the material. If you don't finish everything in the lab. And often we have more in the lab than anyone can do we? Because there's always somebody who's like, taken 15 already before and they're like, so you give them like six things to do. But if you do the first two, you're usually okay, right? Um, so don't stress about not finishing the lab. Do stress, but not submitting the lab because your attendance and submission of a good faith effort, whether it works or not, does, is how we sort of assess the labs. Okay, um, now, I know people get sick in a class like this. There's somebody sick now or not. Um, Just because, you know any group of other people was always something you said. So if you miss a lab, you can miss two without penalty, without a grading. But obviously if you miss the lab and you didn't get the materials, so you need to learn it because you're in data structures versus any of the data. But from a grading point of view, you can miss up to two labs with no penalty. Um, uh, I'm talking to you. Someone is going out next week. Office hours will start right after homework one goes out. We'll post the schedule and piazza, um, read the course admin page. So here's the thing. A lot of faculty spend the first lecture or like 50% of it reading their syllabus to the students. I see why, but I'm not going to do it. Tough students can read a syllabus. They can know if they understand it or not, and if they don't, they can ask questions on Piazza, please. But because the academic integrity cases, um, requirements apply to everyone. So if you have a question about them, post on Piazza. Because like I said, if you have a question, somebody else does too. And we want to be sure everybody answers it. Um, you know, how do we deal with late homework? How do we um, I mentioned academic integrity. That's an issue. Please be careful about that. AI is not different. Right. Because when you submit something, that's your work. So and if your roommate does it, it's not your work. If your mom does it, it's not your work. If an AI does it, what part of you're not used to using I don't know. This is I remember someone from the dean's office, like, well, what do we do about AI? I said, well, I don't get it. Is the student in AI then it's a then it's not real work, right? So, um, so you need to read these things because I follow the rules, whether you read it or not. So that's important. Um, and please ask questions because, you know, I don't like going to the dean's office, and I don't like giving students a zero and a homework because they submitted it after the two token deadline, you know, so if you don't know what that means. Then again, please ask. Okay. Any questions about horse mechanics before the section one players take this? Oh.

I saw it when I was visiting the lab yesterday on great scope. It said that the first homework was due next Tuesday. Is that incorrect?

I can check it's released next Tuesday. Okay, so either you saw the release date or we incorrectly encoded the due date as the release date. So if you see that, please post on Piazza. This is a great example because like everybody is going to see it and we screw up. It's a big class. And I've got I've got a staff of 30 people, 33 people 30 for the gravity connection. So there's 35 of us here and we all want to help. But, you know, coordinating 35 people is there was another question. Okay. Um, then obviously it seems like we got it wrong. Please post on Piazza because I will forget.

That there's a mistake. It's not an message.

Yeah. So here's what the course website looks like in case you haven't seen it. So here's general information. The much vaunted admin pages here. So these are all the rules and regulations and you know late homework and how do we grade labs and blah blah blah blah blah and all that stuff I say blah blah blah, but it's important. Um, and here's the calendar. So homework one is the release date and then homework one is due a week later. So this is correct. Grade scope may or may not be correct. That's between me and my infrastructure team. There's like three tiers to it. So we'll get that. We'll get that sorted out for you. Um, okay. So I think can I have my, um, uh, my players please. So we have, uh, come on up, come on up. We're going to have a short performance by the CSS 15, section one players. Um, they are farmers. Justin and Stephanie. All right, so setting is a country estate, um, a very wealthy family. And there is a butler who will now take the food. Hello. I'm Jes because my name is Jes. I must be a butler. We butlers are busy people. We organize the lives of our employers and their staff. We handle events like parties. For example, after our party, we clean up. After washing up, we usually have a large collection of clean silverware. Of the finest quality, of course. That. My life would be so much easier if only I could hire a silverware specialist who would help me store and retrieve all of these items, Mr. Keyes, I can help you. Just leave it to me. I'll take all your precious silverware. Sorry for you. And you just let me know when you want it back. And soon I'll get it right for you. Come on. Dreaming. Fantastic. I assure you, I'm for real. I studied computer science. Allow me to introduce myself. I am Abby. An abstraction barrier. I'm here to protect you from each other. You want to work out a contract? So you, uh. So you know what to expect. And you. Oh, you know what? You know what you have to do. And you know what you have to expect. Yes, yes. Here's what I need. I'll give you a table covered in silverware. You put it away. I don't care where. But I want to be able to get it back when I need it. For example, we might want to get the pieces back one at a time for polishing. Got it. Got it. Let me get started. But we don't have the full contract yet. Hey, I need some fresh juice. I know what I'm doing. I learned about a cool data structure called a bag. I'll clean that table off and never lose anything.

Okay.

You can turn. Okay, okay.

Go.

UNKNOWN
For it. All. Right.

Wow. Very nice. Please give me an item to Polish.


Excellent. Now, please give me all the spoons for inventory.

Just. Just a spoon. Yes, please go.

Here we go. Oh, that. That took a while. But thank you. Wait. I don't think you gave me all of them. Did you use our heirloom silverware? I, I think we're done. Thank you for your interest in the position. Oh.

I think I might be able to help. I took data structures at home. Would you mind if we finish this project or so?

You're quite right. Let's get to that. Oh. Thank you. Okay. Well, yeah. Yes. Quite right. Let's get to that. Now, you want the Civil War specialist to take all the Civil War after a party, give it all back or give it back. One piece chosen arbitrarily at a time. What else do you need? As I was saying before, every Thursday, be polishing silverware. We'll do that one piece at a time. Sometimes we'll get the silverware by type boards, spoons, knives, radish forks and so on for inventory. And of course, sometimes I'll need to ask for a certain number of places settings. Anything else? Are some of these operations more urgent than others? Now that you mention it, yes. After a party, there's plenty of time to put things away. It can't take all night. But no one is desperate. As you see, we have. We have plenty of room here In Farnham Hall. The polishing of the bit more important because the polishing staff will become impatient. But getting place settings is very important. As my generous employer often arrives unannounced guests and wants a meal organized very quickly. I do the inventory myself and so I must be able to get items by type quickly. Anything else? I think that's it.

No problem. I have a specialist data structure I've made myself. Here.

Go. Done.

Oh, good. You can finish. Scattered all day. Yeah.

Yeah. So.

Not bad. Slower than the last candidate. But there's time for cleanup. Please. Please give me your place. Settings.

Very good.

I have all the remaining.

Oh. Oh. Okay. That's right. That's.

Beautiful, right? Yes. Oh my God. Okay. That's okay. Uh, mostly. Uh. Yes. I want them back. So thank you, thank you, thank you, thank you for the. Seller. And, um, actually, I should have left them in here. Uh. Um. All right. So. Um, as we proceed today, think about, you know, what we just saw and try to map the performance on the concepts, which we're going to talk about. Uh. So this course is about two things. Okay. Since drawing is slow, maybe I'll do that. So I will draw this picture a million times during the during the turn. Uh, one of the things the course is about is data abstraction. And the other thing, of course, is about cost. How much do things cost? Less. Thank you. Uh, so I want to talk for a moment about abstraction. And again, I have my, uh, my normal picture here. Abstraction is a key concept in computing, but also in life because, well, you couldn't live without it. Um, many of you eat sandwiches, I do. Right? Um, and you're able to eat sandwiches. You don't have any problem. Do you know what species of wheat was used for this to make the bread. Of course you don't. Right. What was the weather like on that farm? And where was the farm? Right. You don't need. You can't keep everything in your head all the time. Right. So part of the problem, one of the issues we have living in the world is that there are so many details that we can't pay attention to everything all the time. So what we do is we pay attention to selected things that are important to us. Right? And that is basically the heart of abstraction. It's part of the way your brain works. Um, AB means, um, okay, so I get abductor muscle pulls one leg away from the other one, and the track comes from tracker, which means it is a track. So here comes from here, which means to pull. So abstraction etymologically means to pull away. Pull away from something where it's like tractor attraction. That's where they're all related. Um, so abstraction means that we pull away from something, we ignore the details, and we pay attention to just the salient features. You'll often hear computer scientists say, can you tell me that at a 30,000 foot view? You know, what that means is, you know, I don't need to know where every blade of grass is. I just kind of need to know. Are there rivers down there somewhere? Are there roads? Right? Um, so whenever you have. So this is abstraction in general. Now in this course we're going to use something very specific called data abstraction, which we'll talk a bit more about in a minute. But the key thing that you need to know about abstraction is that there are always three rules. There's something called the client. And the client is sometimes called the user. Um, it can be a human, it can be a, uh, it can be a piece of software. Right. So, um, you know, your, your, your poker application could be a client of a card abstraction. It has a way to store cards, and it doesn't know all the details of cards, but it just needs to know is this a five of clubs or not? It doesn't need to know all the details. So a client is the is the role that is the user of some abstraction. Of course, if anybody is going to use it, somebody has to make it real. And that's the implementer. If it's a person. Or the implementation if it's a piece of code. So if there's a if your program has a card class, then people can use the card class and someone else or the same person, but in a different but wearing long hair instead of a hat can actually implement it and make it real, right? So the client uses a thing, the implementers, the thing that makes it usable makes it easy. Now, if any of this is going to work, you have something in the middle which we often refer to as an abstraction barrier. It goes by a lot of names. You'll often, um, I'll usually call it an interface. Called an API application programing interface. You'll hear it called a contract. Right. So Jeeves was our client here, and one and two were two different implementation attempts at the same of the same abstraction. The abstraction was silverware maintenance, you know, silverware storage and retrieval. That was the that was the the that was the abstraction. And the client runs the whole house. And one of the things they need to do is interact with the with with a silverware storage and retrieval mechanism, and they don't care how it works, but they they need to be able to do certain things. They need to be able to get, you know, the bosses come back and they say, hey, we've got 20 friends. Can you set 20 places at the table? They need to go? Okay. 24 x 29, 20 spoons, 20, you know, fish forks or whatever. Um, so whenever there's an abstraction, there are these three roles in C plus plus. These are very clear. So in computer science we're very specific about abstraction and we're explicit about it. When I learn a new language, one of the first questions I always ask myself is what are the main mechanisms for abstraction in this language? I always start with it. And different languages can be something different than what their mechanisms are and what they support, right? Um, so in C plus plus with data abstraction, what we want to do is we want to think about what kinds of data are in the problem, and we want to create abstractions for it, because we want to write a program that thinks about zombies. Right? It's a game and you're going to have zombies. It's attack of the zombies game. And so I want to have zombies. I want to be able to declare a variable type zombie. I'm going to make a list of zombies. Right. Um, and zombies have certain properties. And so what I want to do is I would like that to be a type in my mind. But the designers of C plus plus no built ins on it. Right. They can't possibly build in every type. You might want to know. So what do they do? They build in simple ones that they think everybody can use. Integers. Floating point numbers. Um, strings are kind of actually a class. They're not really built in, but they ship with, so they're always there. Um, io streams, it's got all of these fundamental things, and then they give you a mechanism for adding new types to the language. I would like there to be songs. Knock yourself out. Right. And what do you do if you if you're going to have some this is you're going to have a zombie. The H file and the interface and some other stuff will live in there. You'll probably have some kind of zombie dot CPP and that'll be the implementation. And then the application is the is the application, you know. Um, zombie apocalypse. I don't want to write zombie apocalypse. I'll just say game. All right. So everybody that makes sense to everybody. So the general principle of the abstract is abstraction, the specific kind of abstraction that we're going to see over and over. Every data structure we look at is going to be something called a container. It's a place to put other things like a bag, which is a real data structure, by the way. That's a real thing. Um, this was a bespoke one that was that was specific for silverware. Um. I'm sorry I lost track of it. So yeah. So we're going to use data abstraction so that we can add new types to the language. And then we can program as if those things were built in. That's the goal. Okay. So I already said data abstraction is very special kind of um every data structure. So I think I said this. You want to add robot students. You want to have a game, you want to, you know, have, um, basketballs, you know, maybe there's a maybe there are basketballs and want to have a basketball class. And then you have 20 basketballs and we can, um, everybody can shoot the balls at the same time and stuff can happen. Um, and you want to be able to program with these types as if they're built in. So they should be as powerful, as useful as the built in types. So that's a that's a key feature if you can achieve it. Which of course he does. It does bless you. Um and you don't have to know how they work. Right. How long did you did you know that strings are classes and sequence plus? Okay. So some of you know, some of you may not know, you probably didn't know on the first day though, right? Someone just said, oh, you've got strings. He said, great strings. I can have variables. I can pass through the functions, I can return them, I got strings, they're built in someone's hand and nothing's actually to pass. But you can program with them with that. And do you know how they work? Strings are complicated. They're very like the first data structure we're going to look at. But they also in C plus plus have like locality information. You know what um language multiple language support. They've got tons of stuff in there. Um it's enormously complicated and streamlined. But you can but you don't have to know that you can use strings. And they they mostly just work the way you expect. So that's the goal of data abstraction. So cost is another big theme of the course though it won't. Um we'll see as much of it there. It'll be a couple of weeks before we really look at it. The observation is, as we saw in the play, different implementations of an abstraction. So you can have multiple different implementations of abstraction, right? You could implement it, you could implement it, right. You could all implement some some abstraction. And we could all use the same file except for the private part, which we'll talk about in a minute. Um, but we can we can all have the same interface and different implementations. Likewise, there can be many clients, and the person who implements it doesn't have to know what the client is going to do with it. Kind of, you know, not my job, right? You're going to you're going to have dinner parties. Good for you. You're in a country estate. Great. You're a party planner. Also great. But you're a caterer or at a university. I you know, I really don't care. Just. Do you want to store silverware or do you want to get it back and how? Right. That's, um, so this data abstraction is just a separation. Why would you pick one implementation over another? Um, why? Different goals. So different cost. Yeah. Can you find an example in our play?

Uh, the first one was cheaper to store the data.

But more costly to retrieve certain types of data. Exactly. Second one was inverse.

Exactly. So, um, different different implementations may have different costs. And so the cost model of an implementation is critical when you're building an application in which one you pick. And of course, there's often not a right answer. Right? If storing is the main problem and retrieval by type isn't the thing you care about, then the bag is green. Sweep everything in the bag. Tax. You can get individual items fast, as long as you don't care too much about what the individual is, right? But if you need for forks, for knives, for spoons, then it's not a great data structure for that kind of operation. So different operations on the data may have different costs. And those are related to the internal choices that the data structure implements. And so those are the kinds of things that we want to do. Um, the related example is, you know, you can dump all your clothes in a big bag, right? So I just didn't want you this morning. So I got the big bag of laundry, and I could have just said, yeah, I'll just put that in the corner of it. But now I folded stuff. I put them in drawers because it makes the retrieval operation much better. I need a pair of pants. I go to the cloud. Okay. There's, like a bunch of pants. I need a t shirt or whatever. Um. Okay, so one of the things we're going to do is we're going to learn a formal way to think about the costs of the instructions. If I don't spend much time on this for the first couple of weeks, because it makes more sense after we've worked with 1 or 2 data structures, and then we can analyze the cost. So we'll talk about it in about two weeks. Um, there are two kinds of costs that are really important. There's time and there space. We were focusing on time here. But space can also matter. Um, I gave this example in my other class yesterday. A modern automobile. It's not really a car anymore. It's an app with wheels. And it's not even an app. It's a collection of apps. And in fact, a modern car has anywhere from one dozen to two dozen even more computers, I think. At one point, the Tesla model S, I think, had like 26 computers in it. There's a computer network in the car and it communicates with external networks. Right. You got over the air stuff and cell phones and help. I'm in trouble. But you know, how does all that stuff work? Um, if you're if you're going to put a computer on something that needs fuel and a jet engine, it probably doesn't have two terabytes of memory. You want to keep them. You want it to be cheap. You want it to be small. You want it to be resilient and hot environments. Right? So it probably has a small amount of memory. So you and you might be okay for slower operations as long as they are fast enough. Right. If it's so slow that the engine self-destructs then that's not good. But sometimes there's a notion of fast enough and sometimes memory matters. You don't have as much memory. Um, if you need to transmit data over the internet, the size matters a lot, because the internet is slow compared to local processes. So we're going to talk about time and space, but we're mostly um. That space matters. We're not going to do proofs in this class. You'll do that in CSE 160 algorithms. So we'll mostly use less formal arguments, um, for explaining these things. But we want to get you started thinking about it because again, that's what makes you employable. Somebody gives you a project and you say, okay, well, what are my options? I can pitch this, this, this. Let me think about this application. What are the what are the anticipated mix of operations? Which of these things is more appropriate given that mix of operations? Right. This makes you, um, a software developer. So we'll learn more about this in a couple weeks. Um, okay. So general stuff, um, and motivation. So we have some goals here. And when you start, of course, you take your intro course and maybe you take, we're going to switch a little bit so I can change the styling. But anyway, you start out and you take your first programing course and you know, you're, you're just you're a beautiful person, but a baby person, but you're not even a person. Yes. Um, but you take this course over the course, you, you grow, you know, you start to grow big, unsightly programing muscles, and you, um, and you learn to solve relatively small problems. They don't feel small when you're in the intro course. They feel big. But compared to, like, industrial projects, let's confess, they're small. Okay? Everybody starts somewhere. Um, you learn about how computers work. That's really important. Um, you gain debugging skills that are appropriate for the complexity of the problems that you're using. Um, in CSS 11, you'll learn, uh, you know, you'll learn about functions, pointers, I hope recursion. If not, um, I'm going to hit it pretty hard. Um, and by the end of CRS 11, you're building a program of more than one piece. So you're already starting to see the data abstraction. You'll you'll have 1 or 2 classes. And um, now that's so that's a good start. That's a good start. But what we do in 15 is we want to take. So 15 is a program that takes as input the sort of data that that emerges from Excel and turns you into somebody that that can be hired. And so what we're going to do is we're going to look at what you would call intermediate columns. And again they're going to seem big. This problem seem big the first time now. Um, so we're just going to advance that skill. You'll have 2 or 3 different modules, maybe even as many as 5 or 6. So projects 2 to 3 times is as large as you might see in a lot. Um, you'll you'll learn about selecting data structures. You'll you'll analyze costs. You'll learn more about how computers work. Um, you'll understand new implementation strategies, and of course, you'll develop the attendant debugging skills, because I don't know about you, but my programs never work the first time, right? Anybody here? All your programs always work the first time? If so, I want to study you with somebody in the psychology department and tell you about something that. So, um, so programs that, um, programs that don't work are much more common. Programs that work. And, um, debugging is the process of transitioning from, from one source to another. So we're going to help you with those skills. But at the end of 15 you're hirable. Um, one of my former colleagues used to say, the course that gets you hired by Google, but I don't know. Um, okay. So finally, we're a bit into lecture now, but I'm going to tell you what a data structure is. Kind of here's the problem. Different people in our field kind of define data structures will be different. So there are two ways to think about it. Um, one is that they're kind of the data abstraction or the abstract thing. Okay, a list, a tree and um, the file index. Right. You'll think of those as data structures. Um, but a more specific one is how the data are actually organized in the computer's memory. Okay. Um, so, for example, in the bag, we had them in our in our bag example, we had them stored with no particular order or internal coherence. And that was why it was hard to get the things back out again by type, because they weren't stored and there's no internal way to there was no internal, um, analog of the type of the data they used. If you didn't have all the forks in one array and all the right, you didn't have it. The second data structure, however, um, you know, has a place for big spoons. Little spoons, um, forks, which for some reason is labeled in Russian. Um, uh, knives and chopsticks or whatever. Um, I don't know if there's anything a corkscrew needs to be. That's why I did this. Um, so, anyway, um, so here's a key. Key observation. The way you organize data can actually represent information. This is huge. This is this is like a mind blowing thing, but people do it all the time. Uh, I remember, um, I haven't flown for a while, but I have a pilot's license, so I haven't flown for a long time. But I remember one of my instructors. I forget what he was. I forget what the information was, but there was a there was a heading that we were going to have to get after we take off the road and take off, and then we're going to turn to somebody. And he said, and while before we even get to the runway, he said, take the heading bug, which is this little piece of plastic, and put it on the heading. You're going to change on this, on this thing in the, um. And, um, it was actually a little dial that you could turn. And, uh, and this is interesting because what he's doing is he's extending my brain. Right. I might forget what the heading is. So he's going to store it not in my brain, but in a physical thing that's right in front of me. And then when I take off, I go, oh.

Yeah, yeah.

We're turning to 142 degrees. That's the that's the head. Right? Um, and he was full of things like this when you, you know, whenever you get a frequency, take the next frequency and put it over here in this range. Um, jet pilots used to take clean coffee cups and put them on the gear handle, which raises and lowers the landing. Why would they do that? Because they're flying the plane and they want to lower the flaps, which are the next level. And when they grab it, they want it to feel really different if they inadvertently grab the landing and they retract the landing gear before landing, that would be back. Right. So. So the interesting thing is we do this in the world. We store information in the outside world as an extension of our brain. Similarly, we can organize data in the computer's memory in a way that makes certain things easy and certain things hard. And there's always as engineers, there's always a trade off. There's no like, you get this all the time from students. Look, there are three different ways of doing this. Which one is the best one? Can't I just learn about one? Because, you know, we all just want to learn about life because it's easier. But but no, they're free and they're different and they have different trade offs. And so you kind of have to know um, so all data so all the data structures we would get are going to be containers where you store other data, and each one will have an interface, the interface, by the way, the rules of engagement. And um, as our lawyer told us, as Abbie mentioned, um, that the interface tells the client what they can expect, what they can do, and tells the implementer what they have to do. It's the implementers to do list and it's the clients can do this, I can do this, I can do these things. Um, a former colleague of mine used to give this example, uh, it's a good idea tonight when you have some time to think about it, think about the application of scoring photos. And don't go on the web and search for ways. Think about based on whatever you know, coming into this class from your intro CSS course, what would you pick? You know, if you had 100,000 photos in your library, how would you store them? Let's think about what data structure you're going to write a program that relates all of your. Just write them down on a piece of paper and then put it away. And then in three months, pull it out again and see if you would make the choices to sort of it's kind of a fun exercise. Alright, so what I want to do now is I want to think about our first data structure. Which is a list. And of course there's data abstraction associated with it because did I mention that all the data structures we do are going to have a data extraction associated with them? Um, so remember that data structures are ways of organizing information in memory. That's one definition. It's very useful when we can store information embedded in the data, which we talked about with the brain. Um, and so this is all the stuff in the previous slide. One thing to mention is often students are confused. Is it an error if the list is empty? Now all this to start out at you, right? I'm going to have a birthday party, and I want to have an invitation list. Get out a piece of paper. How many people are on the list? Zero. Zero is a fine number of people to have on the list. Right? So it's not weird. It's not an error. It's the way lists start, right? It's almost all data structures start right. That's normal when you add things to the data structure. And then you get them out again later and maybe you delete them. And so the size of a data structure typically changes over time. Zero elements one element 10,000 elements 900 elements. Right. Um, and talks about costs. I didn't talk about encapsulation. Encapsulation is the key part of data abstraction in the language with classes. The idea is that the class encapsulates the information. It's a capsule so that the client can't get their dirty mitts on my data. And we implement this. How? Right. Private. Yeah. You use the keyword private, right? And hopefully you've been thoroughly indoctrinated that your data members should be private. I will continue that effort. Um. But you. Well, we'll see, we'll see why. Okay, so we need data. Data abstraction to, uh. I feel like there's a thing I wanted to say here. I just want to check because I have a list of things I want to say, so I don't forget. All the other piece of paper, I have a list. Okay. Like we said, we add new types to the language. Um. So, um. Yeah. So one thing I might do here is just reemphasize that you've got your, uh, you've got your dot h file. I knew there was something. Let's be green. So you've got your H file here. You've got your impl. Got cpp. See the source code that implements the interface. Um, and so this is the person with the long hair. Because we don't have time for haircuts, we've got too many programs to write. Uh, and then the client is whatever the application is. And again, I want to, um, I just want to point out that for a given abstraction, there's, there's an interface, there can be multiple clients of the abstraction and multiple implementations, but the client would typically pick which application the one not by reading all the code, but by reading the documentation that says looking things up is cheap. Looking things up is expensive. Whatever. Um. Okay, so do we do this in real life? Yes. If you get a job, you will absolutely do, um, two questions whenever you want to. Um, whenever, whenever you have a problem, you think about what kinds of data do do I have in the problem? And then you think about for a program that manipulates this data, what specifically do I want to store, right. What are the data elements? I want to store zombies. I want to store, um, bags that can hold brains because zombies carry bags of brain. Zombies eat brains. You all know this is common knowledge. Um, right. So you figure out what data you want, and then for any of the things that aren't, like, built in you, you make a data abstraction. Um, so you have to think about what are the data you want to store and what do you want to do with it? What do I want to store? What do I want to do, what I want to do with it? I the operations, I want to make a new brain back. I would like to add a brain to the brain bag. I would like to eat a brain that's coming out of the brain back. I would like to ask how many brains are in the bag, because if there aren't enough, I will get hungry and angry and start stealing more grains. Right. So you have to think about the operations. And so you make kind of a list and we're going to do that now. Um, for example, um, the implementer now has two. So the client can do that. The implementer can then say okay, well I got to store bags of brains. How do I represent that using either the built in things of C plus plus or other abstractions. Right. So now the implementer may become the client of other abstractions. Maybe the bag is a hash table. Oh, here's a hash table. I'll just use that. Right. Um, and how are they going to implement all these operations? Right. How do I know how many brains are in the back? How many? How do I take the brain out of the bag? Well, they're going to have to do all that stuff. Um, what makes this confusing when you're new to the field is that advanced practitioners look like they have all the information in their brain at the same time, but they don't really, um, They do this wonderful trick. A good engineer can switch rapidly between different levels of abstraction. They can pop up and say, okay, well, we're going to do this, this, this, this and this. And someone says, how does it work? And they go, oh, okay, well, that's probably going to do this. Um, you begin to feel it after a while, you can sort of say, no, I'm ignoring that and I'm not paying any attention to it. And then later, okay, I've got to pay attention to it. But now I'm going to forget what. So and this ability to switch quickly makes it look like they know everything all the time. But but they don't. And here's how you know they're humans and humans can't. There's nobody who knows how everything on, um, a SpaceX rocket works. There is no one person who knows everything. There is no one person who knows all the software that's in a modern automobile. Nobody there. Isn't that right? What they can do is there somebody can say, oh gosh, the ABS system looks a little bit flaky. Hey, you abs team, we've got this thing. Can you fix it for us? Right. So, um, so it's an interesting skill, but. So this is why it's important to develop the skill you should be self-aware about. Okay. I'm the client you put on your computer. If you would like to borrow the hat, come to my office. You can put on the hat and say, okay, I want to design a data structure from the client's point and work that out on the whiteboard. And then you put on your hair. Some of you have hair, but I need to put it on nice. And then and then you say, okay, well, how does this thing work? Where am I going to store? Okay. Um. So what's our first data stream, Alice? Wireless. Because almost any program that isn't absolutely trivial. First work in first programing. An intro course has a sequence of data in it somewhere, right? I've got my invitation list for my birthday. I've got lists of, uh. Departments I need to visit because I'm moving. My my daughter just moved, so she just went through this. She had like a list of all the apartments that she was looking for. Um, so first. Okay. We're clients. What's a list? Well, a list is a sequence of elements. We say it's an ordered sequence of elements. What is that? Ordered. Ordered doesn't mean sorted. Like, you know, alphabetically or something. Order just means there's a first element. There's a second element, there's a third. There's some order of the elements, whether they're sorted or not. It's kind of a higher level thing. Just from a list point of view, I can say, who's the first person on the invitation list? Right. I can ask that question who's the last person? And obviously, if there is zero people on the list, those questions don't have answers. So then as an implementer, I have to think about this. But um, so there's a first, second, third. And so we often call these um, we say that this are linear because they, uh, you know, I've got, uh. You know, I've got the first person on my list. I've got the second person on my list who's much happier than the first person. I've got, uh, some other person on the list. I don't know, they're half as happy anyway. Um, but they're linear, right? This is the first one. This is the second one. Is this. And, um, as you know, in C plus, plus, as in many other languages, we would we would give them numbers that we call indices. And so, um, we would say this person is person zero, this is person one. This is person two. Because computer scientist we start with zero. It's the number of steps from the beginning. This is the this is the first seed in the row. And this is seed zero because I haven't taken any steps to take one step. So that's important. So that's kind of why we do it. It's the distance from the beginning of the thing. And the first thing is always equities. So this is okay. Um, so you tell me, what do you want to do with the list? Okay. We want to know if it's empty. I like that. I like.

It.

Okay. What else? Somebody's brainstorming. Come on, give me stuff. Yes, I hope so. Okay. Size. Number of elements in the list. Sure. That's an excellent one. Yeah. You might want to sort it. I might want to sort it. That sounds like a useful thing to do. And there was someone over there in the back. Oh.

Where's the list?

Um. Is in. So you want to search for something? I'll call. It is in. Just to give it a name. And there was, uh. Yes. Uh, yeah. Yes. I want to add elements to the list. If it starts out with size zero, then the other ones are not happy until we can add something. So that makes sense. Um, we can think about different ways to add an element to the list, because if the list is empty, then this becomes the first thing, right? But if the list isn't it, you can say wherever you. Want at the beginning and at the end we can add it at position two. In which case this would be the new item number two. Item at index two. So I'll call that maybe add at, but we could have added at it front. Add it back right. So what else do we have removed. Yeah. If we're going to add things to the list we might want to remove them. Maybe so-and-so made me mad. I don't want them at my birthday party.

Do that. I don't know.

Doesn't seems linguistically suspect, but that's okay. Yes. You might. Either one.

Okay, I was just going to say you might want to access a specific element of that.

List by position. So you want to say who's third? Yeah. Okay. Um, I'll call that. You know, get that maybe.

Uh, you might want to display or, like.

Print the list. Excellent. Um. Print this either whole or by whole or range, I guess. Range? That's interesting. Yeah.

Uh, maybe we want.

To find where a certain.

Element is or index of.

Um, yeah. Okay. So yeah, you're right because we said is in which is boolean, but you might not know where it, where it is. So indexing these are great. Um, so but this this is how you start, right. What do I want to store? I want to store a sequence of elements. Invite these to the birthday party or whatever. I just want to store sequence. Um, I want them to be ordered because I want there to be a first or a second or third item. We'll take that as a given. Um, what do I want to do with the data? Well, I want to I want to add new elements. I want to take elements out. I want to ask if an element is in the list. I want to know if the list is empty. I want to know how many elements are in the list. I want to I want to print the list.

I want to do.

All those.

Things right.

And notice that we can do all of these, um, without, uh, without writing any code. I haven't shown you any C plus. Plus. And, you know, there's nothing about semicolons or commas here. This is just the semicolons. The comments don't matter if you don't know what you want to do. So first figure out what you want to do. Um, we want to create and delete. Now, this one is not specific to lists. Um, but in well, whenever you write a program, if you need a new list, you have to make a new list. I get out a sheet of paper. So there's always a creation of everything that we're going to do. There might be multiple ways to create it, but there's at least one. Because what you know, what good is a list you can add things to if you can't create it? Oh, yeah, there's a list. Okay, give me a new one. I can't actually have this. You can only imagine how nice it would be if only you had it right. That would be pointless. So and in C plus plus you have to think about getting rid of the list. Okay so quick comp 11 review. Um if you have a variable defined in a function. When is it created? When the function is called. Correct. Um there's subtlety for like if you put it between curly braces then it's on block entry. So it's when you execute it the first time the block. But for functions generally when the function is when you call the function, you make an activation. You know the seven steps of function. You make a you make an activation record. You you make a place for each of the parameters. You copy the parameters in. You make a place for any the local variables, you do any initializations. Then you start executing the code for the body function. So um, so that's when it's created. When does the when is that data reclaimed. You would say that the you know so I've got a list. It's in a function. I made it just for this function. It was just created. I'm going to use the list in the function. When does that list go in as completed running. Yeah. So at function return it's part of the return process before you actually return to the caller. You you have to destroy all the data. When you do complicated data in C plus plus you have to think about destroy. This is different Java and Python people okay. This is different in Java. In Python you know, you just you eat your food and just throw the plates on the floor and somebody plays it that way. But but in C plus plus you have to when before you take out the dishes you have to say when will they when will they get put away. You have to ask that question right away. Because if they will get put away at the end of the function, you can make them a local variable. If they will get put away later by some other function, you have to put them on the heap. So that was very quick review. Don't worry. They'll do it once. Okay, so finally code. Uh oh. The semicolons everybody. Do you like your semicolons? Python.

Um.

I was never so attached to them. Uh, okay. So how do we, uh. So where do we get started? Well, here's how you get started. You make an interface. Um, is the interface to hold of the H file? No. You'll find that the class definition class, um, has a public section.

Public section.

And a private section. The interface is the collection of things that a client can do. So that's the public right. Because the definition of private is clients can't access it. The definition of public is can right. So the interface is the public part. That's the that's the outside facing thing. Um, in C plus plus. And this is kind of annoying. Um, in the H file you have to reveal what the secret storage strategies are. Um, but the compiler will prevent anyone from depending on it. Um, if you put private. Oh, you see the semicolon here? Yeah. Don't forget that. To do this. Leave it out and then watch what happens. Pages and pages and pages of error messages and compile it frantically. So, um, this is so it's always a good place to look if you're getting stacks of syntax errors when we make a request. Um, okay. So that is the, uh, that's the interface. And I sort of chose one arbitrarily because I didn't know what you were going to say in advance. What time is it? Oh.

Interesting. Uh, okay.

So I said, uh, you know, size and had it the back out of the front at at. Now, of course, if you have add at any index, you don't need to know you you don't need at it. Back at it.

I just put them in the front right.

That it front is just added zero. Add it back is add at the size of the thing. But that's a minus. What's that. Minus one. Uh, no size of the thing. Because. So the last current element is it's size minus one. But if you add a new element at the back, it's going to be the current size of one. And then size is going to go up by one. So um, that's a great question. And you should always ask that question because it is so easy. So that's fantastic. Um, and then I had to remove that remove first occurrence and uh, the index. And then we have to decide, well, what does it return if the thing isn't in the list? Maybe minus one because indices can't be minus one. I see that you're.

Using LM type.

Are good.

Yes C plus plus have generics.

Uh, yes. It has a thing called templates, which we I think we'll look at later. Okay. Um, so, so there's no such thing as Ellen type. I made that up. And the reason I just the reason I wanted to do that was I. The structure of the list doesn't really depend on the kind of the data. That's kind of a separate concern. So I'm just using Ellen type. If I did a list of ints, then what would happen is you would see int end, but one of them is an index and the other one is the type of data. So I just wanted a way to clearly say this is whatever type the elements of the list. And we'll talk about next time. Um, what you can just write, you know, entity for string if it's a string. Yes. Um, but the C plus plus has mechanism has several mechanisms for abstract enemies. We won't do templates right away. So if you guys are distressed by the talk of templates, don't be. Um, you don't have to know them. We'll use them. Maybe later. Is auto template.

No.

Okay, so some of you have heard about the auto keyword. Um, let's not use auto and 15. Um, so auto is a way to have the compiler. Uh, I don't want to write the type. You figure it out, and, um, that's good for those of us who are lazy, which includes it. Um, but there are some types in C plus plus that are really hard to write. And there's one that's even impossible to write. So there's a thing in modern C plus plus called a lambda, which doesn't have lambda in its name anywhere, but it's called a lambda, and there's no programmer way to write the type of it anyway. So there are situations where you kind of have to use auto. And then there are situations where it's really painful if you don't, but we won't encounter any of those. So I would encourage you not. So if you don't know about auto grade, don't use the thing you don't know about. If you do know auto, don't use it because in C plus plus 15 it's simple enough and I think it's good practice for the programmer to have their intentions clearly in mind and clearly on paper or on screen.

You for the intelligence? Yeah, yeah. I'm just curious. So would you how would you like, define it? Would it be like auto the variable name and that equals whatever.

Um, so these are great questions I kind of want to, don't I. Sorry I don't want to talk about all of them.

Bringing like JavaScript type. Yeah.

Yeah. So I, um I don't want to talk about auto or stuff like that. Just very simple things.

Yeah. It's a bit of a separate question.

Uh, we.

Learned about, like, vectors and stuff and, uh. Yeah. 11 hours. Is there any vectors and array lists?

No. An array list is basically the same as a vector. Um, when I, uh, we used to call them all kinds of things, we used to call them capital V vectors, but then that's kind of confusing. Little V is the built in one big V is that is the one we wrote. So I was kind of hunting around for another name in Java uses uses ArrayList. And I just wanted something to be more different from the built in one. So that's that. And Java already had a name and I thought it was a fine name, so I used it. Um, now Python has a thing called lists which are a different animal. So don't, don't, don't think they're going to be like this. Um, other questions. These are these are great.

Okay.

Maybe a quick question. So now let's put on our hair. And let's think about the private. So the private section the private section is what I would call, um, you know, how you go to a restaurant and there's like a door that says staff only, right? Because customers aren't allowed to go in there and, like, throw things in the fryer. Because, you know, they're going to they're going to burn themselves or their children, then they're going to sue you. So you just don't let them go in there. And that's why we have our private data. Right. So what, um, think about this for a minute now, if you already know, if you know, then please be quiet. If you haven't worked through this before and make sure it isn't anyone I don't know. Um, what kinds of things do we think we need to store? So if we're a client and we need to be able to do those things, what do we need to store? What do we want to do? What do we want to store? Do you have a hand? Yeah. It's not your hand. Sure. Uh, I guess.

Like the five. Not confusing. The five looks like that.

Yeah. So that sounds like that sounds like a good thing. We might want to keep track of the current size of the thing. So let's, uh, let's tap on blue and then say the current size maybe or num elements. Or we can give it some name. Right. The number of things currently stored in the in the list. What else do we need?

The contents of the list.

Yeah.

The list isn't very useful if you don't actually store the data. So we need a way to do that. And in C plus. So I'm just going to call it the data. And the current size can be an integer. Um the data is interesting. Um and I kind of want to postpone that discussion until next time, but, uh, but we need to store the data somehow. Okay. So we put a note about it. That's good. I feel like there's one other thing we might need, but maybe it's not obvious if you haven't worked through this. Okay, so I've got my hair on, right? And I have a lot of experience dealing with clients, and the clients will do crazy things like they'll say, I want a list. That's not crazy. That's why we exist, right? You're going to get them. Um, there are no elements in the list. So Kerr is going to start out at zero. There's not going to be any external data, but we haven't figured out what that means yet. But that's the thing. Um, and then they say add an element. Add an element, add an image, add it up. So here's my my theory. If they say add an element you're going to be back in like three milliseconds. They're going to want to add another. Right. So um, I probably don't want to store exactly the number of things that they have.

So like initial size.

Uh, well, so there's going to be an initial size. Um, so yes, I feel like that's a little bit. The name is a little bit confusing because we'll see later. Why. Um, but but yes. And then I have a couple more hands. Yeah. So we call it. So you've you've seen it at 11. We usually call it the capacity. And that's also what Java calls it above. Um, so usually the buffer is the place where we store them. So that will be another name for the data storage. Okay. So that could be a the answer to the question how are we going to store the data. Could we have a buffer. Right. Um but typically what we'll do is we'll say, oh you want to store an element. Um, so I need a place to store that. I'll get one that I'll store a thousand. And then you give me elements, and then next time we're going to talk about what happens when they get to the thousand and first. We'll talk about that next. Any questions before we break for the day. I think it's time. 245. Wow. I'm early. Okay. Anyone would anyone like to do a vocal number for us? What do we do? All right, have a good day, everybody. Enjoy the fall in New England.

UNKNOWN
Oh. Yeah. Oh, yeah.

Oh! Yeah. Oh! Yes! At one point. Yeah. Yeah. So.

That if you have multiple grains for you.

Thank you, thank you, thank you, thank you. Where's the member? That's what I'm saying. I'm waiting on the ground. Oh, how do we voting? Yes. Are we doing that? Yes. Yes. I think. We have time. Have you done anything else? Yeah. So I'm 11. Doesn't really know what we want. Yeah. Which is. So here I am. But we are here because it was just something I needed. Yeah. Yeah. Okay. So, reactor. Reactor. Yeah. And, um. Yeah. Um. So you had to learn how, like CSS. Yeah. So you have a class, like, structure, and I was like. Oh, yes. It was awesome. Awesome. Yeah. Nice. Are you doing reactor? Yes. I just want to ask you any. Back in the day, everyone was at two. I mean, like, intellectually. We were in the same place. So was it. How big was.

Yours?

I was like, I don't know, like, I don't know what. Hello. Okay.

And it's true. I have a colleague who uses windows.

Um.

He has.

Um.

So I think it's.

Um.

Middle school. So.

Um, I've done many, many companies. Um. Yeah, but I did, uh, like, basically the equivalent of CSS 160. Oh, no. Oh.

So that's not a C plus.

That's a I just, uh. Yeah. But I was, um, I don't. Think you are. You are. So are you. You're part of this. I mean. Okay. We'll see. You'll see. Yeah. He's going to change as I'm getting older, but I want to never know what he's I don't know your number. Well, like. And, like, you know, sometimes I make a big change. Yeah. Oh, yeah. Um. And then they took something out, and then.

You made classes?

Probably.

If you didn't use classes.

In sequence class, then, um. Oh, they.

Start out superficially. Kind of.

Not, because. How about you? I don't know. I'm not really understanding, you know, like.

The first homework. I can look at it.

Yes. Yeah. But I. Yeah. What I did for you. I mean, I'm not on an all nighter. You also sit in on the lessons. I don't know, because it's hard to see, you know, your contract. You don't like me. That's all you got? Oh, yeah. I still got, like. Oh, so Like, you know, like there. I could have gone. Well, they failed it. Oh, no, it's too different. Yeah. There's. So. I mean, they removed that. Yeah. I think so. Yes. You're running like. I don't want to see that too much. Well, you did this anyway. I want to become smarter. What are you asking? Yeah, well, I want you to. All right, guys, I don't think we're going to make it. It's like you're teaching the class, right? Yeah. Oh. That's interesting. Yeah. Are you sure? We weren't all the way up to date. Like.

My question is not a philosopher.

Yeah. You can't put the screen right? No, no. We understood the question. Yeah. They don't come. If you don't know a lot of people in this program already.

The other students, I mean, I generally.

Um. You have to take me for the first time. Yeah, I know. I'm just an actor.

So the answer is.

I don't know, off the top upset. I don't I'm not watching. I need to be able to have partners. So.

You need to know how Unix works. Because we just need to know.

Well, I don't know about it now.

But he's doing the follow.

Up that, uh, a lot of that knowledge. So.

There's not there's not.

A pithy answer to your office hours. All this stuff I don't know yet.

But usually what happens is I, I wait till the second week because I've got like three committees that.

I need to figure.

Out when they're meeting and like, rather than set office hours and.

Change them.

I just wait a week or two. Um, but I'm often around. So you're welcome to stop by.

Okay.

Um, you can also talk.

To Professor Monroe.

Or.

Um, Professor Mendelson.

They're both. They both teach 42. So the three of us.

All teach all.

And so any one of us can.

Sort of. Thank you so much. You're welcome. I was just curious when I heard it, like, kick off. I never yeah, this. I'm in the hospital. Well, we still usually. So we, you know, we go either way or.

You know? Or we'll say that this requires a linear. Quadratic.

Matrices. Yeah. So.

So the measurements.

It's okay. No big deal. You don't.

Have to.

Teach it. But when it applies, it's just that most people.

Today speak.

More about it. Yeah. So I remember when I was in.

Your shoes.

Um, sophomore, you know, uh, I think 64 days. Weeks. Uh, I'm going to take one of the 64 days. So now we have, you know, people running the budget. Yeah. Having a lot of. Just one terabytes. Yeah. It's two. Hundred megabytes. Yeah. We. Don't have that much. But the same kind of information that these trainers are offering.

If you want to search.

For data on the disk. This is so slow. If you're going.

To search your.

Memory. This is one way to throw it in too. Yeah.

So these are.

Things. You have to be aware of. Right. Kind of like a. Rule. Like, you know, if. You have.

Only one thing.

To do. I mean, you. Well? I think so.

We always post things like this.

So you like something? I proposed to her. No, I said no. You want to push? Yeah, yeah. 11 years. Will there be a workshop? If so. I've never heard. It doesn't have. Okay. I'm not mad about you. I feel strong. I mean, I get what you're saying. Yes, I expand my brain. You have to like it. I'm going to go do another lecture. I won't look at. It. Which is not fair. So what's what's your. I don't know if we'll get some points. All right, so we should do a survey. Yeah. Yeah, I.